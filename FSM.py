# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ aiogram
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from configs.passwords import group_id, loggs_acc
from functions import get_usd_cny_rate
from google_sheets import find_product, get_sheet_base
from keyboards import Buttons
from structure import structure_menu


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è message
class Get_admin(StatesGroup):
    message = State()


class Message_from_admin(StatesGroup):
    user_id = State()
    message = State()


class Rassylka(StatesGroup):
    base = State()
    post = State()


class Next_level_base(StatesGroup):
    kategoriya = State()
    brand = State()
    model = State()
    info = State()
    quantity = State()
    price = State()


class Get_product_info(StatesGroup):
    info = State()
    quantity = State()
    price = State()


async def message_from_user(message, state: FSMContext, bot):
    await bot.send_message(group_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:')
    await bot.copy_message(group_id, message.chat.id, message.message_id)
    await bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ')
    await state.clear()


async def message_from_admin_chat(message, state: FSMContext, bot):
    if str.isdigit(message.text) is True:
        await state.update_data(user_id=message.text)
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await state.set_state(Message_from_admin.message)
    else:
        await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ... –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã (–ù–∞–ø—Ä–∏–º–µ—Ä: 1338281106)')
        await state.set_state(Message_from_admin.user_id)


async def message_from_admin_text(message, state: FSMContext, bot):
    data = await state.get_data()
    user_id = data.get('user_id')
    await bot.copy_message(user_id, message.chat.id, message.message_id)
    await bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ')
    await state.clear()


async def rassylka(message, bot, state: FSMContext):
    # data = await state.get_data()
    # data_base = data.get('base')
    sheet_base = await get_sheet_base()
    await sheet_base.rasylka_v_bazu(bot, message)
    await state.clear()


async def save_all_user_information(message, state: FSMContext, bot):
    try:
        if str.isdigit(message.text) is True:
            if message.text == '0':
                await Buttons(bot, message, structure_menu["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"],
                              menu_level="–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ "
                                         "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:").new_main_menu_buttons()
                await state.clear()
            else:
                data = await state.get_data()
                kategoriya = data.get('kategoriya')
                brand = data.get('brand')
                model = data.get('model')
                quantity = message.text
                await bot.send_message(chat_id=message.chat.id, text='<b>–ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É,</b> —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. '
                                                 '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å.ü§ù\n\n'
                                                 '–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu', parse_mode="html")
                sheet_base = await get_sheet_base()
                await sheet_base.record_in_base(bot, message, kategoriya, brand, model, quantity)
                await state.clear()
                await bot.send_message(group_id, f'üö®!!!–°–†–û–ß–ù–û!!!üö®\n'
                                                 f'<b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –ó–ê–Ø–í–ö–ê –æ—Ç:</b>\n'
                                                 f'–ü—Å–µ–≤–¥–æ–Ω–∏–º: @{message.from_user.username}\n'
                                                 f'id —á–∞—Ç–∞: {message.chat.id}\n\n'
                                                 f'<b>–ü—Ä–µ–¥–º–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞:</b>\n'
                                                 f'–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {kategoriya}\n'
                                                 f'–±—Ä–µ–Ω–¥: {brand}\n'
                                                 f'–º–æ–¥–µ–ª—å: {model}\n'
                                                 f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n'
                                                 f'–ë—ã—Å—Ç—Ä–µ–µ —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–∞—Ç—É –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–∫–∞ –æ–Ω –Ω–µ —Å–ª–∏–ª—Å—è\n'
                                                 f'/sent_message - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞\n\n'
                                                 f'<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ: </b>https://docs.google.com/spread'
                                                 f'sheets/d/1upFEYAoBg1yio5oC2KFX6WMb0FDBslw-NplIXHNzR9Y/edit?usp=sharing',
                                       parse_mode='html')
                await state.clear()
        else:
            await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã (–ù–∞–ø—Ä–∏–º–µ—Ä: 11)')
            await state.set_state(Next_level_base.quantity)
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ FSM/save_all_user_information', e)
        await bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ FSM/save_all_user_information: {e}')

#
# async def next_level(message, bot, state: FSMContext):
#     await clients_base(bot, message).perevod_v_bazu(message.text)
#     await state.clear()

async def count_price_step_one(callback, bot, state: FSMContext):
    try:
        product_list = await find_product(callback.data)
        if '__' in callback.data:
            split_list = callback.data.split('__')
            data = await state.get_data()
            if split_list[0] == data.get("kategoriya"):
                await Buttons(bot, callback.message,
                              structure_menu["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"]["üì¶ –ó–∞–∫—É–ø–∫–∞ –æ–ø—Ç–æ–º"][f'{split_list[0]}'][f'{split_list[1]}'],
                              back_button=f'{split_list[0]}',
                              menu_level="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å/—Å–µ—Ä–∏—é:").menu_buttons()

                await state.set_state(Next_level_base.model)
            else:
                await state.update_data(info=product_list)
                await bot.edit_message_text(
                    text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —á–∏—Å–ª–æ–º (–≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0)',
                    chat_id=callback.message.chat.id, message_id=callback.message.message_id)
                await state.set_state(Next_level_base.quantity)
        elif callback.data == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.clear()
            await Buttons(bot, callback.message, structure_menu["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"], menu_level= "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:").menu_buttons()
        else:
            await state.set_state(Next_level_base.model)
            await Buttons(bot, callback.message, keys_dict=None).speed_find_of_product_buttons(product_list)
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ FSM/count_price_step_one', e)
        await bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ FSM/count_price_step_one: {e}')


async def count_price_step_two(message, state: FSMContext, bot):
    try:
        if str.isdigit(message.text) is True:
            data = await state.get_data()
            if message.text == '0':
                await Buttons(bot, message, structure_menu["–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"],
                              menu_level="–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ "
                                         "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:").new_main_menu_buttons()
                await state.clear()

            elif int(message.text) < int(data.get('info')[0]['MOQ, —à—Ç']):
                await bot.send_message(message.chat.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞ (MOQ) –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: "
                                                        f"{data.get('info')[0]['MOQ, —à—Ç']} —à—Ç.")
                await state.set_state(Next_level_base.quantity)

            else:
                mess = await bot.send_message(text='–°—á–∏—Ç–∞–µ–º..üöÄ', chat_id=message.chat.id)
                usd_uan = await get_usd_cny_rate()
                uan_rate = float(usd_uan['CNY'])
                usd_rate = float(usd_uan['USD'])
                price_uan = float(data.get('info')[0]['–°—Ç–æ–ª–±–µ—Ü 1'].replace(",", ".")) if data.get('info')[0]['–°—Ç–æ–ª–±–µ—Ü 1'] else 0
                quantity = int(message.text)
                logistic_price_of_MOQ = float(data.get('info')[0]['–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∑–∞ MOQ, $'].replace(",", ".")) if data.get('info')[0]['–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∑–∞ MOQ, $'] else 0
                end_price = ((price_uan * uan_rate * quantity) + (usd_rate * logistic_price_of_MOQ)*1.2)
                await state.update_data(quantity=quantity)
                await state.update_data(price=end_price)
                await Buttons(bot, mess, None, menu_level=f'<b>–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã:</b>\n\n'
                              f'<b>–ú–æ–¥–µ–ª—å:</b> {data.get("info")[0]["–ú–æ–¥–µ–ª—å"]}\n'
                              f'<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {data.get("info")[0]["–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞"]}\n'
                              f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç:</b> {quantity}\n'
                              f'<b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞, ‚ÇΩ:</b> {end_price}\n').zayavka_buttons()

                await state.set_state(Next_level_base.price)
        else:
            await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã (–ù–∞–ø—Ä–∏–º–µ—Ä: 11)')
            await state.set_state(Next_level_base.quantity)
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ FSM/count_price_step_two', e)
        await bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ FSM/count_price_step_two: {e}')


async def handler_user_message_info(message, bot, state: FSMContext):
    try:
        product_list = await find_product(message.text)
        if product_list is not None:
            await Buttons(bot, message, keys_dict=None).speed_find_of_product_buttons(product_list)
            if len(product_list) == 1:
                await state.set_state(Next_level_base.info)
        else:
            try:
                await bot.edit_message_text(
                    text="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> (–¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –±—É–∫–≤ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ "
                    "–ª–∞—Ç–∏–Ω–∏—Ü–∞) <b>–∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏</b>\n\n(–ü—Ä–∏–º–µ—Ä: CA-67 (–Ω–∞–∑–≤–∞–Ω–∏–µ), 6936985015064"
                    " (–∞—Ä—Ç–∏–∫—É–ª)).\n\n –ù–∞–∑–≤–∞–Ω–∏–µ, –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º "
                    '—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ –∫–Ω–æ–ø–∫–µ <b>"üìã –ö–∞—Ç–∞–ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω"</b> –≤ '
                    "–æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    parse_mode="html",
                )
                await state.set_state(Next_level_base.info)
            except TelegramBadRequest:
                await bot.send_message(chat_id=message.chat.id, text='<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> '
                                                                          '(–¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –±—É–∫–≤ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ '
                                                                          '–ª–∞—Ç–∏–Ω–∏—Ü–∞) <b>–∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏</b>\n\n'
                                                                          '(–ü—Ä–∏–º–µ—Ä: CA-67 (–Ω–∞–∑–≤–∞–Ω–∏–µ), 6936985015064'
                                                                          ' (–∞—Ä—Ç–∏–∫—É–ª)).\n\n –ù–∞–∑–≤–∞–Ω–∏–µ, –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ª–Ω—ã–π '
                                                                          '–ø–µ—Ä–µ—á–µ–Ω—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ '
                                                                          '–∫–∞—Ç–∞–ª–æ–≥–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ –∫–Ω–æ–ø–∫–µ '
                                                                          '<b>"üìã –ö–∞—Ç–∞–ª–æ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω"</b> –≤ "–æ—Å–Ω–æ–≤–Ω–æ–º '
                                                                          '–º–µ–Ω—é"', parse_mode="html")
                await state.set_state(Next_level_base.info)
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ FSM/handler_user_message_info', e)
        await bot.send_message(loggs_acc, f'–û—à–∏–±–∫–∞ –≤ FSM/handler_user_message_info: {e}')
