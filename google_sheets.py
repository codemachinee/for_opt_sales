from datetime import datetime

import gspread
import pytz
from gspread.exceptions import APIError
from loguru import logger
from tenacity import (
    retry,
    retry_if_exception_type,
    stop_after_attempt,
    wait_exponential,
)

from configs.passwords import admin_id, loggs_acc

moscow_tz = pytz.timezone('Europe/Moscow')
admin_account = admin_id


@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=3),
       retry=retry_if_exception_type((APIError, ConnectionError, TimeoutError)))
class Sheet_base:  # –∫–ª–∞—Å—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    def __init__(self, bot, message):
        self.bot = bot
        self.message = message
        gc = gspread.service_account(filename=r'configs\pidor-of-the-day-5880592e7067.json')  # –¥–æ—Å—Ç—É–ø –∫ –≥—É–≥–ª —Ç–∞–±–ª –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Ñ–∞–π–ª—É –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–∞
        # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —é—Ä–ª –∞–¥—Ä–µ—Å—É:
        sh = gc.open('clients_china')
        self.worksheet_base = sh.worksheet('requests')
        self.worksheet_client_base = sh.worksheet('clients_base')

    async def record_in_base(self, kategoriya: str, brand: str, model: str, quantity: str, reasons: str='–ó–∞–∫—É–ø–∫–∞ –æ–ø—Ç–æ–º'):  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
        try:
            worksheet_len = len(self.worksheet_base.col_values(1)) + 1  # –ø–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ 2 —Å—Ç–æ–ª–±—Ü–µ
            self.worksheet_base.update(f'A{worksheet_len}:K{worksheet_len}', [[self.message.chat.id,
                                       self.message.from_user.username, self.message.from_user.first_name,
                                       self.message.from_user.last_name, None, reasons, kategoriya, brand, model,
                                                                               quantity,
                                       str(datetime.now(moscow_tz).strftime('%d.%m.%y %H:%M'))]])
        except Exception as e:
            logger.exception('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ google_sheet/record_in_base', e)
            await self.bot.send_message(loggs_acc, f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ google_sheet/record_in_base: {e}')

    async def chec_and_record_in_client_base(self, reasons=None):  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
        try:
            worksheet_len = len(self.worksheet_client_base.col_values(1)) + 1  # –ø–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ 2 —Å—Ç–æ–ª–±—Ü–µ
            if str(self.message.chat.id) in self.worksheet_client_base.col_values(1):
                pass
            else:
                self.worksheet_client_base.update(f'A{worksheet_len}:E{worksheet_len}', [[self.message.chat.id,
                                                  self.message.from_user.username, self.message.from_user.first_name,
                                                  reasons, str(datetime.now(moscow_tz).strftime('%d.%m.%y %H:%M'))]])
        except Exception as e:
            logger.exception('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ google_sheet/chec_and_record_in_client_base', e)
            await self.bot.send_message(loggs_acc, f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ google_sheet/chec_and_record_in_client_base: {e}')

    async def rasylka_v_bazu(self):  # —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—ã
        mess = await self.bot.send_message(self.message.chat.id, '–∑–∞–≥—Ä—É–∑–∫–∞..üöÄ')
        telegram_ids_values_list = self.worksheet_client_base.col_values(1)
        telegram_names_values_list = self.worksheet_client_base.col_values(2)
        for i in range(1, len(telegram_ids_values_list)):
            try:
                await self.bot.copy_message(telegram_ids_values_list[i], self.message.chat.id, self.message.message_id)
                    #self.bot.send_message(self.worksheet.col_values(1)[i], '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏?', reply_markup=kb6)
            except Exception as e:
                logger.exception('–†–∞—Å—Å—ã–ª–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', f'–ë–æ—Å—Å, —Å @{telegram_names_values_list[i]} –ø—Ä–æ–±–ª–µ–º–∞{e}')
                await self.bot.send_message(loggs_acc, f'–ë–æ—Å—Å, —Å @{telegram_names_values_list[i]} –ø—Ä–æ–±–ª–µ–º–∞{e}')
        await self.bot.delete_message(self.message.chat.id, mess.message_id)
        await self.bot.send_message(self.message.chat.id, '–ë–æ—Å—Å, —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ')

    async def get_clients(self):
        clients_list = []
        try:
            rows = self.worksheet_client_base.get_values()
            for row in rows:
                if row == rows[0]:
                    pass
                else:
                    clients_list.append(row)
            return clients_list
        except Exception as e:
            logger.exception('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ google_sheet/get_clients', e)
            await self.bot.send_message(loggs_acc,
                                        f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–Ω–æ–µ google_sheet/get_clients: {e}')



